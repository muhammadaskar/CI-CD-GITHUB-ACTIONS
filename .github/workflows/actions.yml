name: ðŸš€ Deploy to environment production

on: 
  push:
    branches:
      - main

jobs:
  build:
    name: Build and Deploy Docker Container
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Copy .env.example to .env
      run: cp .env.example .env

    - name: Build Docker image
      run: docker build --build-arg APP_PORT=${{ secrets.APP_PORT }} -t api-golang:latest .

    - name: Save Docker image to tar.gz
      run: |
        docker save api-golang:latest | gzip > api-golang_latest.tar.gz

    - name: Upload Docker image as artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image
        path: api-golang_latest.tar.gz

    - name: Download Docker image artifact
      uses: actions/download-artifact@v3
      with:
        name: docker-image

    - name: Transfer Docker image to remote server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        source: api-golang_latest.tar.gz
        target: /tmp/api-golang_latest.tar.gz

    - name: Execute remote SSH commands using password
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          # Load Docker image
          sudo docker load < /tmp/api-golang_latest.tar.gz

          # Stop and remove existing Docker container
          sudo docker stop api-golang || true
          sudo docker rm api-golang || true

          # Remove existing Docker image
          sudo docker rmi api-golang:latest || true

          # Run the new Docker container
          sudo docker run -d --name api-golang -p ${APP_PORT}:${APP_PORT} api-golang:latest

          # List running Docker containers
          sudo docker ps
